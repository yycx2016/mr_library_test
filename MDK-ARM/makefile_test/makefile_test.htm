<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [makefile_test\makefile_test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image makefile_test\makefile_test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Aug 31 23:55:15 2024
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
msh_cmd_dread &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ea]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[43]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[2b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">BusFault_Handler</a><BR>
 <LI><a href="#[130]">mr_dev_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[136]">mr_printf</a><BR>
 <LI><a href="#[120]">dev_lock_take</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">dev_lock_take</a><BR>
 <LI><a href="#[11f]">dev_lock_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">dev_lock_release</a><BR>
 <LI><a href="#[12f]">mr_dev_open</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[136]">mr_printf</a><BR>
 <LI><a href="#[121]">dev_open</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">dev_open</a><BR>
 <LI><a href="#[11b]">dev_find_by_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11b]">dev_find_by_path</a><BR>
 <LI><a href="#[29]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">HardFault_Handler</a><BR>
 <LI><a href="#[2a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">MemManage_Handler</a><BR>
 <LI><a href="#[28]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">NMI_Handler</a><BR>
 <LI><a href="#[2c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">UsageFault_Handler</a><BR>
 <LI><a href="#[122]">dev_register_by_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">dev_register_by_path</a><BR>
 <LI><a href="#[118]">dev_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">dev_close</a><BR>
 <LI><a href="#[11d]">dev_get_path</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11d]">dev_get_path</a><BR>
 <LI><a href="#[15d]">msh_dlist_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15d]">msh_dlist_tree</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[43]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[69]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6c]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">EXTI0_IRQHandler</a> from drv_pin.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">EXTI15_10_IRQHandler</a> from drv_pin.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">EXTI1_IRQHandler</a> from drv_pin.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">EXTI2_IRQHandler</a> from drv_pin.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">EXTI3_IRQHandler</a> from drv_pin.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">EXTI4_IRQHandler</a> from drv_pin.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">EXTI9_5_IRQHandler</a> from drv_pin.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[52]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">SPI1_IRQHandler</a> from drv_spi.o(i.SPI1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[55]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[64]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[33]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[63]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[67]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5f]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[56]">USART1_IRQHandler</a> from drv_serial.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[57]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[58]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[89]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[75]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[72]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[71]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[73]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[70]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[6f]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[1c]">drv_pin_configure</a> from drv_pin.o(i.drv_pin_configure) referenced 2 times from drv_pin.o(.data)
 <LI><a href="#[78]">drv_pin_init</a> from drv_pin.o(i.drv_pin_init) referenced from drv_pin.o(mr_auto_init.2)
 <LI><a href="#[1d]">drv_pin_read</a> from drv_pin.o(i.drv_pin_read) referenced 2 times from drv_pin.o(.data)
 <LI><a href="#[1e]">drv_pin_write</a> from drv_pin.o(i.drv_pin_write) referenced 2 times from drv_pin.o(.data)
 <LI><a href="#[1f]">drv_serial_configure</a> from drv_serial.o(i.drv_serial_configure) referenced 2 times from drv_serial.o(.data)
 <LI><a href="#[79]">drv_serial_init</a> from drv_serial.o(i.drv_serial_init) referenced from drv_serial.o(mr_auto_init.2)
 <LI><a href="#[20]">drv_serial_read</a> from drv_serial.o(i.drv_serial_read) referenced 2 times from drv_serial.o(.data)
 <LI><a href="#[22]">drv_serial_start_tx</a> from drv_serial.o(i.drv_serial_start_tx) referenced 2 times from drv_serial.o(.data)
 <LI><a href="#[23]">drv_serial_stop_tx</a> from drv_serial.o(i.drv_serial_stop_tx) referenced 2 times from drv_serial.o(.data)
 <LI><a href="#[21]">drv_serial_write</a> from drv_serial.o(i.drv_serial_write) referenced 2 times from drv_serial.o(.data)
 <LI><a href="#[24]">drv_spi_bus_configure</a> from drv_spi.o(i.drv_spi_bus_configure) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[7a]">drv_spi_bus_init</a> from drv_spi.o(i.drv_spi_bus_init) referenced from drv_spi.o(mr_auto_init.2)
 <LI><a href="#[25]">drv_spi_bus_read</a> from drv_spi.o(i.drv_spi_bus_read) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[26]">drv_spi_bus_write</a> from drv_spi.o(i.drv_spi_bus_write) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[7d]">end</a> from service.o(i.end) referenced from service.o(mr_auto_init.5.end)
 <LI><a href="#[74]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[77]">mr_heap_init</a> from memory.o(i.mr_heap_init) referenced from memory.o(mr_auto_init.1)
 <LI><a href="#[7b]">mr_msh_init</a> from msh.o(i.mr_msh_init) referenced from msh.o(mr_auto_init.3)
 <LI><a href="#[7]">mr_pin_close</a> from pin.o(i.mr_pin_close) referenced 2 times from pin.o(.data)
 <LI><a href="#[a]">mr_pin_ioctl</a> from pin.o(i.mr_pin_ioctl) referenced 2 times from pin.o(.data)
 <LI><a href="#[b]">mr_pin_isr</a> from pin.o(i.mr_pin_isr) referenced 2 times from pin.o(.data)
 <LI><a href="#[8]">mr_pin_read</a> from pin.o(i.mr_pin_read) referenced 2 times from pin.o(.data)
 <LI><a href="#[9]">mr_pin_write</a> from pin.o(i.mr_pin_write) referenced 2 times from pin.o(.data)
 <LI><a href="#[d]">mr_serial_close</a> from serial.o(i.mr_serial_close) referenced 2 times from serial.o(.data)
 <LI><a href="#[10]">mr_serial_ioctl</a> from serial.o(i.mr_serial_ioctl) referenced 2 times from serial.o(.data)
 <LI><a href="#[11]">mr_serial_isr</a> from serial.o(i.mr_serial_isr) referenced 2 times from serial.o(.data)
 <LI><a href="#[c]">mr_serial_open</a> from serial.o(i.mr_serial_open) referenced 2 times from serial.o(.data)
 <LI><a href="#[e]">mr_serial_read</a> from serial.o(i.mr_serial_read) referenced 2 times from serial.o(.data)
 <LI><a href="#[f]">mr_serial_write</a> from serial.o(i.mr_serial_write) referenced 2 times from serial.o(.data)
 <LI><a href="#[13]">mr_spi_bus_close</a> from spi.o(i.mr_spi_bus_close) referenced 2 times from spi.o(.data)
 <LI><a href="#[16]">mr_spi_bus_isr</a> from spi.o(i.mr_spi_bus_isr) referenced 2 times from spi.o(.data)
 <LI><a href="#[12]">mr_spi_bus_open</a> from spi.o(i.mr_spi_bus_open) referenced 2 times from spi.o(.data)
 <LI><a href="#[14]">mr_spi_bus_read</a> from spi.o(i.mr_spi_bus_read) referenced 2 times from spi.o(.data)
 <LI><a href="#[15]">mr_spi_bus_write</a> from spi.o(i.mr_spi_bus_write) referenced 2 times from spi.o(.data)
 <LI><a href="#[18]">mr_spi_dev_close</a> from spi.o(i.mr_spi_dev_close) referenced 2 times from spi.o(.data)
 <LI><a href="#[1b]">mr_spi_dev_ioctl</a> from spi.o(i.mr_spi_dev_ioctl) referenced 2 times from spi.o(.data)
 <LI><a href="#[17]">mr_spi_dev_open</a> from spi.o(i.mr_spi_dev_open) referenced 2 times from spi.o(.data)
 <LI><a href="#[19]">mr_spi_dev_read</a> from spi.o(i.mr_spi_dev_read) referenced 2 times from spi.o(.data)
 <LI><a href="#[1a]">mr_spi_dev_write</a> from spi.o(i.mr_spi_dev_write) referenced 2 times from spi.o(.data)
 <LI><a href="#[7f]">msh_cmd_clear</a> from msh.o(i.msh_cmd_clear) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[85]">msh_cmd_dclose</a> from msh_device.o(i.msh_cmd_dclose) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[86]">msh_cmd_dioctl</a> from msh_device.o(i.msh_cmd_dioctl) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[82]">msh_cmd_dlist</a> from msh_device.o(i.msh_cmd_dlist) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[84]">msh_cmd_dopen</a> from msh_device.o(i.msh_cmd_dopen) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[87]">msh_cmd_dread</a> from msh_device.o(i.msh_cmd_dread) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[83]">msh_cmd_dselect</a> from msh_device.o(i.msh_cmd_dselect) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[88]">msh_cmd_dwrite</a> from msh_device.o(i.msh_cmd_dwrite) referenced from msh_device.o(mr_msh_cmd.1)
 <LI><a href="#[81]">msh_cmd_echo</a> from msh.o(i.msh_cmd_echo) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[7e]">msh_cmd_help</a> from msh.o(i.msh_cmd_help) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[80]">msh_cmd_logo</a> from msh.o(i.msh_cmd_logo) referenced from msh.o(mr_msh_cmd.1)
 <LI><a href="#[4]">msh_printf_1</a> from msh_device.o(i.msh_printf_1) referenced 2 times from msh_device.o(.data)
 <LI><a href="#[5]">msh_printf_2</a> from msh_device.o(i.msh_printf_2) referenced 2 times from msh_device.o(.data)
 <LI><a href="#[6]">msh_printf_4</a> from msh_device.o(i.msh_printf_4) referenced 2 times from msh_device.o(.data)
 <LI><a href="#[7c]">spi_init</a> from main.o(i.spi_init) referenced from main.o(mr_auto_init.4)
 <LI><a href="#[76]">start</a> from service.o(i.start) referenced from service.o(mr_auto_init.0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[89]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[161]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[162]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[163]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[164]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[165]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[cb]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[91]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[93]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[166]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[97]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[99]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9f]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a1]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[a5]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[167]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[a7]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a9]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ab]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ad]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[168]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[169]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[16b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[16f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[170]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[172]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[173]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[174]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[175]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[176]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[177]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[178]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[17f]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[180]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[181]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[8b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[186]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[187]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[188]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bb]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[189]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bd]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bf]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>

<P><STRONG><a name="[c2]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
</UL>

<P><STRONG><a name="[c3]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[98]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[c9]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[cc]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[ce]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e8]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[119]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
</UL>

<P><STRONG><a name="[154]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strflags
</UL>

<P><STRONG><a name="[11e]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
</UL>

<P><STRONG><a name="[11a]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_echo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_child
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write_force
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
</UL>

<P><STRONG><a name="[d0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[18a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_register
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_take_bus
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[d2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[18e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_close
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_close
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d4]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>

<P><STRONG><a name="[191]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[c5]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[c6]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c8]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[c0]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[c1]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[6f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[aa]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d7]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[a0]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[da]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9c]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[a4]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[db]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9e]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a6]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[90]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[cf]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[cd]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[70]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[74]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e6]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[e7]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ac]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ae]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[dc]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[d8]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b5]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[dd]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[b0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[e5]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[df]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ba]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[195]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[196]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[be]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[197]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ed]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[ec]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[ee]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ef]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e1]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[e2]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[f0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_pin.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = EXTI1_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = EXTI2_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = EXTI3_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_pin.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_delay_ms
</UL>

<P><STRONG><a name="[102]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 284 bytes, Stack size 28 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[103]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[129]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
</UL>

<P><STRONG><a name="[f3]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[10c]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[126]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[f9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[f5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[110]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
</UL>

<P><STRONG><a name="[fc]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
</UL>

<P><STRONG><a name="[100]"></a>HAL_SPI_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_configure
</UL>

<P><STRONG><a name="[ff]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mx_spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[101]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mx_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[104]"></a>HAL_UART_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
</UL>

<P><STRONG><a name="[106]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_configure
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[107]"></a>HAL_UART_MspInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[29]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>MX_GPIO_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>MX_SPI1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mx_spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SPI1_IRQHandler &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>SystemClock_Config</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_serial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; drv_serial_isr &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ca]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[112]"></a>_mr_fast_pin_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fast_pin.o(i._mr_fast_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mr_fast_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fast_pin_dev_get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
</UL>

<P><STRONG><a name="[b9]"></a>main</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_delay_ms
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_auto_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12e]"></a>mr_auto_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, service.o(i.mr_auto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_auto_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>mr_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mr_board.o(i.mr_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_delay_ms &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>mr_dev_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, device.o(i.mr_dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_dev_close &rArr; dev_close &rArr;  dev_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_close
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_close
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[131]"></a>mr_dev_ioctl</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, device.o(i.mr_dev_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mr_dev_ioctl &rArr; dev_lock_take &rArr;  dev_lock_take (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_remove
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_insert_before
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_take_bus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_configure
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
</UL>

<P><STRONG><a name="[f1]"></a>mr_dev_isr</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, device.o(i.mr_dev_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_isr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_isr
</UL>

<P><STRONG><a name="[12f]"></a>mr_dev_open</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, device.o(i.mr_dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_open
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf_output
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf_output
</UL>

<P><STRONG><a name="[137]"></a>mr_dev_read</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, device.o(i.mr_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
</UL>

<P><STRONG><a name="[138]"></a>mr_dev_register</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, device.o(i.mr_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_register
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
</UL>

<P><STRONG><a name="[130]"></a>mr_dev_write</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, device.o(i.mr_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = mr_dev_write &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_configure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf_output
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf_output
</UL>

<P><STRONG><a name="[139]"></a>mr_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, memory.o(i.mr_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_free &rArr; heap_insert_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_insert_block
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>

<P><STRONG><a name="[134]"></a>mr_interrupt_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.mr_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
</UL>

<P><STRONG><a name="[135]"></a>mr_interrupt_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.mr_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
</UL>

<P><STRONG><a name="[13b]"></a>mr_malloc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, memory.o(i.mr_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mr_malloc &rArr; heap_insert_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_insert_block
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>

<P><STRONG><a name="[13c]"></a>mr_msh_printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, msh.o(i.mr_msh_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf_output
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_printf_4
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_printf_2
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_printf_1
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_new_current_line
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_logo
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_help
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_echo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_init
</UL>

<P><STRONG><a name="[13e]"></a>mr_msh_printf_output</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, msh.o(i.mr_msh_printf_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>

<P><STRONG><a name="[156]"></a>mr_msh_set_prompt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msh.o(i.mr_msh_set_prompt))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[128]"></a>mr_pin_register</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pin.o(i.mr_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mr_pin_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mr_fast_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_init
</UL>

<P><STRONG><a name="[136]"></a>mr_printf</STRONG> (Thumb, 40 bytes, Stack size 152 bytes, service.o(i.mr_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf_output
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_register
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write_force
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_register
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_pop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
</UL>

<P><STRONG><a name="[13f]"></a>mr_printf_output</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, service.o(i.mr_printf_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>

<P><STRONG><a name="[140]"></a>mr_ringbuf_allocate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_open
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_open
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
</UL>

<P><STRONG><a name="[144]"></a>mr_ringbuf_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_free &rArr; mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_close
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_close
</UL>

<P><STRONG><a name="[141]"></a>mr_ringbuf_get_bufsz</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_get_bufsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_get_bufsz &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write_force
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_read
</UL>

<P><STRONG><a name="[145]"></a>mr_ringbuf_get_data_size</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_get_data_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_pop
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
</UL>

<P><STRONG><a name="[146]"></a>mr_ringbuf_get_space_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_get_space_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write_force
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
</UL>

<P><STRONG><a name="[143]"></a>mr_ringbuf_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_register
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
</UL>

<P><STRONG><a name="[147]"></a>mr_ringbuf_pop</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_pop &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_isr
</UL>

<P><STRONG><a name="[148]"></a>mr_ringbuf_push_force</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_push_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_push_force &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_isr
</UL>

<P><STRONG><a name="[149]"></a>mr_ringbuf_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_read &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_read
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_read
</UL>

<P><STRONG><a name="[142]"></a>mr_ringbuf_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, service.o(i.mr_ringbuf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_ioctl
</UL>

<P><STRONG><a name="[14b]"></a>mr_ringbuf_write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, service.o(i.mr_ringbuf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_write &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_write
</UL>

<P><STRONG><a name="[14c]"></a>mr_ringbuf_write_force</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, service.o(i.mr_ringbuf_write_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mr_ringbuf_write_force &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_space_size
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_isr
</UL>

<P><STRONG><a name="[12b]"></a>mr_serial_register</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, serial.o(i.mr_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mr_serial_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_serial_init
</UL>

<P><STRONG><a name="[12c]"></a>mr_spi_bus_register</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, spi.o(i.mr_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mr_spi_bus_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_bus_init
</UL>

<P><STRONG><a name="[152]"></a>mr_spi_dev_register</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, spi.o(i.mr_spi_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mr_spi_dev_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[155]"></a>mr_strerror</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, service.o(i.mr_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dwrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dclose
</UL>

<P><STRONG><a name="[153]"></a>mr_strflags</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, service.o(i.mr_strflags))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mr_strflags &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
</UL>

<P><STRONG><a name="[15f]"></a>msh_dev_get_path</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device.o(i.msh_dev_get_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = msh_dev_get_path &rArr; dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
</UL>

<P><STRONG><a name="[15d]"></a>msh_dlist_tree</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, device.o(i.msh_dlist_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = msh_dlist_tree &rArr;  msh_dlist_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strflags
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dlist
</UL>

<P><STRONG><a name="[15c]"></a>msh_get_root</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i.msh_get_root))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dlist
</UL>

<P><STRONG><a name="[7c]"></a>spi_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = spi_init &rArr; mr_spi_dev_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_register
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_printf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(mr_auto_init.4)
</UL>
<P><STRONG><a name="[b3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[75]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[96]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fa]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[108]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[7b]"></a>mr_msh_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, msh.o(i.mr_msh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mr_msh_init &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_new_current_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_auto_init.3)
</UL>
<P><STRONG><a name="[7f]"></a>msh_cmd_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msh.o(i.msh_cmd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = msh_cmd_clear &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[81]"></a>msh_cmd_echo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, msh.o(i.msh_cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = msh_cmd_echo &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[7e]"></a>msh_cmd_help</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh.o(i.msh_cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = msh_cmd_help &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[80]"></a>msh_cmd_logo</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, msh.o(i.msh_cmd_logo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = msh_cmd_logo &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[13d]"></a>msh_new_current_line</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, msh.o(i.msh_new_current_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = msh_new_current_line &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_init
</UL>

<P><STRONG><a name="[85]"></a>msh_cmd_dclose</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dclose &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_set_prompt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[86]"></a>msh_cmd_dioctl</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dioctl &rArr; msh_dioctl_cmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_datasz
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_bufsz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl_cfg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[159]"></a>msh_cmd_dioctl_cfg</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, msh_device.o(i.msh_cmd_dioctl_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dioctl_cfg &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[82]"></a>msh_cmd_dlist</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, msh_device.o(i.msh_cmd_dlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dlist &rArr; msh_dlist_tree &rArr;  msh_dlist_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_root
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dlist_tree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[84]"></a>msh_cmd_dopen</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dopen &rArr; msh_update_path &rArr; msh_dev_get_path &rArr; dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strflags
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[87]"></a>msh_cmd_dread</STRONG> (Thumb, 376 bytes, Stack size 160 bytes, msh_device.o(i.msh_cmd_dread))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dread &rArr; mr_dev_read &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[83]"></a>msh_cmd_dselect</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msh_device.o(i.msh_cmd_dselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dselect &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[88]"></a>msh_cmd_dwrite</STRONG> (Thumb, 468 bytes, Stack size 176 bytes, msh_device.o(i.msh_cmd_dwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = msh_cmd_dwrite &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(mr_msh_cmd.1)
</UL>
<P><STRONG><a name="[15a]"></a>msh_dioctl_bufsz</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, msh_device.o(i.msh_dioctl_bufsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = msh_dioctl_bufsz &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[157]"></a>msh_dioctl_cmd</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, msh_device.o(i.msh_dioctl_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = msh_dioctl_cmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[15b]"></a>msh_dioctl_datasz</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, msh_device.o(i.msh_dioctl_datasz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = msh_dioctl_datasz &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_strerror
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[158]"></a>msh_dioctl_pos</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, msh_device.o(i.msh_dioctl_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = msh_dioctl_pos &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_update_path
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dioctl
</UL>

<P><STRONG><a name="[4]"></a>msh_printf_1</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, msh_device.o(i.msh_printf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = msh_printf_1 &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>msh_printf_2</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh_device.o(i.msh_printf_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = msh_printf_2 &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>msh_printf_4</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh_device.o(i.msh_printf_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = msh_printf_4 &rArr; mr_msh_printf &rArr; mr_msh_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_device.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>msh_update_path</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msh_device.o(i.msh_update_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = msh_update_path &rArr; msh_dev_get_path &rArr; dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dev_get_path
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_msh_set_prompt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dioctl_pos
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dselect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_dopen
</UL>

<P><STRONG><a name="[113]"></a>_fast_pin_dev_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fast_pin.o(i._fast_pin_dev_get))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mr_fast_pin_init
</UL>

<P><STRONG><a name="[7]"></a>mr_pin_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pin.o(i.mr_pin_close))
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>mr_pin_ioctl</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, pin.o(i.mr_pin_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mr_pin_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>mr_pin_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin.o(i.mr_pin_isr))
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>mr_pin_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pin.o(i.mr_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>mr_pin_write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(i.mr_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mr_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>mr_serial_close</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, serial.o(i.mr_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mr_serial_close &rArr; mr_ringbuf_free &rArr; mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>mr_serial_ioctl</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, serial.o(i.mr_serial_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mr_serial_ioctl &rArr; mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>mr_serial_isr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, serial.o(i.mr_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mr_serial_isr &rArr; mr_ringbuf_push_force &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_push_force
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_pop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>mr_serial_open</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial.o(i.mr_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mr_serial_open &rArr; mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>mr_serial_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, serial.o(i.mr_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mr_serial_read &rArr; mr_ringbuf_read &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_bufsz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>mr_serial_write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, serial.o(i.mr_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mr_serial_write &rArr; mr_ringbuf_write &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>mr_spi_bus_close</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, spi.o(i.mr_spi_bus_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mr_spi_bus_close &rArr; mr_dev_close &rArr; dev_close &rArr;  dev_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>mr_spi_bus_isr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.mr_spi_bus_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mr_spi_bus_isr &rArr; mr_ringbuf_write_force &rArr; mr_ringbuf_get_space_size &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_write_force
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>mr_spi_bus_open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi.o(i.mr_spi_bus_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mr_spi_bus_open &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mr_spi_bus_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.mr_spi_bus_read))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>mr_spi_bus_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.mr_spi_bus_write))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>mr_spi_dev_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(i.mr_spi_dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mr_spi_dev_close &rArr; mr_ringbuf_free &rArr; mr_ringbuf_init &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_configure
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>mr_spi_dev_ioctl</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, spi.o(i.mr_spi_dev_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mr_spi_dev_ioctl &rArr; mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_transfer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_take_bus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_release_bus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_configure
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_get_data_size
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>mr_spi_dev_open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(i.mr_spi_dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = mr_spi_dev_open &rArr; mr_ringbuf_allocate &rArr; mr_ringbuf_reset &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>mr_spi_dev_read</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, spi.o(i.mr_spi_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mr_spi_dev_read &rArr; mr_ringbuf_read &rArr; mr_ringbuf_get_data_size &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_transfer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_take_bus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_release_bus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_ringbuf_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>mr_spi_dev_write</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, spi.o(i.mr_spi_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mr_spi_dev_write &rArr; spi_dev_take_bus &rArr; mr_dev_ioctl &rArr; dev_lock_take &rArr;  dev_lock_take (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_transfer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_take_bus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_release_bus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dev_cs_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[14d]"></a>spi_dev_cs_configure</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, spi.o(i.spi_dev_cs_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spi_dev_cs_configure &rArr; mr_dev_write &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_open
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_close
</UL>

<P><STRONG><a name="[151]"></a>spi_dev_cs_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(i.spi_dev_cs_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_dev_cs_set &rArr; mr_dev_write &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_read
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
</UL>

<P><STRONG><a name="[150]"></a>spi_dev_release_bus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi.o(i.spi_dev_release_bus))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_read
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
</UL>

<P><STRONG><a name="[14e]"></a>spi_dev_take_bus</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, spi.o(i.spi_dev_take_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_dev_take_bus &rArr; mr_dev_ioctl &rArr; dev_lock_take &rArr;  dev_lock_take (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_read
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
</UL>

<P><STRONG><a name="[14f]"></a>spi_dev_transfer</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, spi.o(i.spi_dev_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_dev_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_read
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_dev_ioctl
</UL>

<P><STRONG><a name="[1c]"></a>drv_pin_configure</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, drv_pin.o(i.drv_pin_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_pin_configure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_port_data
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.data)
</UL>
<P><STRONG><a name="[125]"></a>drv_pin_get_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_pin.o(i.drv_pin_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[124]"></a>drv_pin_get_port_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_pin.o(i.drv_pin_get_port_data))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_write
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_read
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_configure
</UL>

<P><STRONG><a name="[78]"></a>drv_pin_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_pin.o(i.drv_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = drv_pin_init &rArr; mr_pin_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(mr_auto_init.2)
</UL>
<P><STRONG><a name="[1d]"></a>drv_pin_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_pin.o(i.drv_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_port_data
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>drv_pin_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_pin.o(i.drv_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_port_data
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pin_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>drv_serial_configure</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, drv_serial.o(i.drv_serial_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = drv_serial_configure &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_serial.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>drv_serial_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_serial.o(i.drv_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = drv_serial_init &rArr; mr_serial_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_serial_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_serial.o(mr_auto_init.2)
</UL>
<P><STRONG><a name="[111]"></a>drv_serial_isr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_serial.o(i.drv_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = drv_serial_isr &rArr; mr_dev_isr &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>drv_serial_read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_serial.o(i.drv_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_serial_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_serial.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>drv_serial_start_tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_serial.o(i.drv_serial_start_tx))
<BR>[Address Reference Count : 1]<UL><LI> drv_serial.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>drv_serial_stop_tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_serial.o(i.drv_serial_stop_tx))
<BR>[Address Reference Count : 1]<UL><LI> drv_serial.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>drv_serial_write</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_serial.o(i.drv_serial_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_serial.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>drv_spi_bus_configure</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, drv_spi.o(i.drv_spi_bus_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_spi_bus_configure &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>drv_spi_bus_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_spi.o(i.drv_spi_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = drv_spi_bus_init &rArr; mr_spi_bus_register &rArr; mr_dev_register &rArr; mr_printf &rArr; mr_printf_output &rArr; mr_dev_open &rArr;  mr_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(mr_auto_init.2)
</UL>
<P><STRONG><a name="[25]"></a>drv_spi_bus_read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_spi.o(i.drv_spi_bus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_spi_bus_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>drv_spi_bus_write</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_spi.o(i.drv_spi_bus_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>desc_allocate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, device.o(i.desc_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = desc_allocate &rArr; dev_find &rArr; dev_find_by_path &rArr;  dev_find_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
</UL>

<P><STRONG><a name="[116]"></a>desc_free</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, device.o(i.desc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = desc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
</UL>

<P><STRONG><a name="[118]"></a>dev_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, device.o(i.dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = dev_close &rArr;  dev_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_close
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_close
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_close
</UL>

<P><STRONG><a name="[115]"></a>dev_find</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, device.o(i.dev_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dev_find &rArr; dev_find_by_path &rArr;  dev_find_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_allocate
</UL>

<P><STRONG><a name="[11b]"></a>dev_find_by_path</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, device.o(i.dev_find_by_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = dev_find_by_path &rArr;  dev_find_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_child
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find
</UL>

<P><STRONG><a name="[11c]"></a>dev_find_child</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, device.o(i.dev_find_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dev_find_child &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_by_path
</UL>

<P><STRONG><a name="[11d]"></a>dev_get_path</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, device.o(i.dev_get_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = dev_get_path &rArr;  dev_get_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_dev_get_path
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_get_path
</UL>

<P><STRONG><a name="[11f]"></a>dev_lock_release</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, device.o(i.dev_lock_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = dev_lock_release &rArr;  dev_lock_release (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_isr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_release
</UL>

<P><STRONG><a name="[120]"></a>dev_lock_take</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, device.o(i.dev_lock_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = dev_lock_take &rArr;  dev_lock_take (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lock_take
</UL>

<P><STRONG><a name="[121]"></a>dev_open</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, device.o(i.dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = dev_open &rArr;  dev_open (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_open
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_open
</UL>

<P><STRONG><a name="[122]"></a>dev_register_by_path</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, device.o(i.dev_register_by_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = dev_register_by_path &rArr;  dev_register_by_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_list_insert_before
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_find_child
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_register
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
</UL>

<P><STRONG><a name="[123]"></a>mr_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i.mr_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_register_by_path
</UL>

<P><STRONG><a name="[117]"></a>mr_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, device.o(i.mr_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_dev_ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desc_free
</UL>

<P><STRONG><a name="[13a]"></a>heap_insert_block</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, memory.o(i.heap_insert_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heap_insert_block
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_free
</UL>

<P><STRONG><a name="[77]"></a>mr_heap_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memory.o(i.mr_heap_init))
<BR>[Address Reference Count : 1]<UL><LI> memory.o(mr_auto_init.1)
</UL>
<P><STRONG><a name="[7d]"></a>end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.end))
<BR>[Address Reference Count : 1]<UL><LI> service.o(mr_auto_init.5.end)
</UL>
<P><STRONG><a name="[76]"></a>start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, service.o(i.start))
<BR>[Address Reference Count : 1]<UL><LI> service.o(mr_auto_init.0)
</UL>
<P><STRONG><a name="[72]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
